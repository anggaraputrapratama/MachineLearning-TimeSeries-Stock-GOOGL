# -*- coding: utf-8 -*-
"""Submission_Proyek_Kedua.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NhH7RMRSt_w2ma5JozrMFt-EYfHWQOY3

## [Anggara Putra Pratama](https://www.dicoding.com/users/anggaraputrapratama)

Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series


Dataset: https://finance.yahoo.com/quote/GOOGL?p=GOOGL&.tsrc=fin-srch
"""

! pip install yfinance

import numpy as np
import tensorflow as tf
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler
from pandas_datareader.data import DataReader

end = datetime(2022, 4, 4)
start = datetime(end.year - 11, end.month, end.day)
stock = yf.download("GOOGL", start, end)

stock

stock.info()

stock.isnull().sum()

plt.figure(figsize=(15,5))
plt.title('Close Price History Stock GOOGL')
plt.plot(stock['Close'])
plt.xlabel('Date')
plt.ylabel('Close Price USD ($)')
plt.show()

data = stock.filter(['Close'])
dataset = data.values

data_train_len = int(np.ceil(len(dataset)* 0.8))

print(data_train_len)

data_train = dataset[:data_train_len]
#data_train = data_train.flatten()
data_test = dataset[data_train_len:]
#data_test = data_test.flatten()


print(data_train.shape)
print(data_test.shape)

skala_data = MinMaxScaler(feature_range=(0,1))
data_train_normalisasi = skala_data.fit_transform(data_train)
data_train_normalisasi = data_train_normalisasi.flatten()

data_test_normalisasi = skala_data.fit_transform(data_test)
data_test_normalisasi = data_test_normalisasi.flatten()

dataset_normalisasi = skala_data.fit_transform(dataset)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(data_train_normalisasi, window_size=60, batch_size=100, shuffle_buffer=1000)
validation_set = windowed_dataset(data_test_normalisasi, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(128, return_sequences=True),
  tf.keras.layers.LSTM(64),
  tf.keras.layers.Dense(25),
  tf.keras.layers.Dense(1),
])

minMae = (dataset_normalisasi.max() - dataset_normalisasi.min()) * 10/100
minMae

class myEarlyStop(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<minMae and logs.get('val_mae')<minMae):
      self.model.stop_training = True

def scheduler(epoch, lr):
  if epoch < 10:
    return lr
  else:
    return lr * tf.math.exp(-0.1)

callback = tf.keras.callbacks.LearningRateScheduler(scheduler)
optimizer = tf.keras.optimizers.SGD(learning_rate=0.001, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, validation_data = (validation_set), epochs=100, callbacks=[callback,myEarlyStop()])

mae = history.history['mae']
val_mae = history.history['val_mae']
loss = history.history['loss']
val_loss = history.history['val_loss']

plt.plot(mae, 'b', label='mae')
plt.plot(val_mae, 'g', label='val_mae')

plt.xlabel('Epoch')
plt.ylabel('MAE')
plt.legend()
plt.show()

plt.plot(loss, 'b', label='loss')
plt.plot(val_loss, 'g', label='val_loss')

plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

